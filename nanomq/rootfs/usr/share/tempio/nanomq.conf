# #============================================================
# # NanoMQ Broker
# #============================================================

system {
	# # num_taskq_thread
	# # Use a specified number of taskq threads 
	# #
	# # Value: 1-255, Obtain automatically if 0
	num_taskq_thread = 0
	
	# # max_taskq_thread
	# # Use a specified maximunm number of taskq threads
	# #
	# # Value: 1-255, Obtain automatically if 0
	max_taskq_thread = 0
	
	# # parallel
	# # Handle a specified maximum number of outstanding requests
	# #
	# # Value: 1-255, Obtain automatically if 0
	parallel = 0
}

mqtt {
	# # max_packet_size
	# # Defines the default max size of a packet that NanoMQ could accept and send
	# #
	# # Hot updatable
	# # Value: 1 Byte-260 MB
	max_packet_size = 1KB
	
	# # max_mqueue_len
	# # The queue length in-flight window
	# # This is essential for performance and memory consumption
	# #
	# # Hot updatable
	# # Value: 1-infinity
	max_mqueue_len = 2048
	
	# # Unsupported now
	max_inflight_window = 2048
	max_awaiting_rel = 10s
	await_rel_timeout = 10s
	
	# # retry_interval (s)
	# # The retry interval is nano qos duration which also controls timer 
	# # interval of each pipe
	# #
	# # Hot updatable
	# # Value: 1-infinity
	retry_interval = 10s
	
	# # The backoff for MQTT keepalive timeout.
	# # broker will discolse client when there is no activity for
	# # 'Keepalive * backoff * timeout.
	# #
	# # Hot updatable
	# # Value: Float > 0.5
	keepalive_multiplier = 1.25
	
	# # property_size
	# # The max size for a MQTT user property
	# #
	# # Hot updatable
	# # Value: 1-infinity
	property_size = 32
	
}

listeners.tcp {
	# # bind
	# # Connect with the host and port
	# #
	# # Value: host:port
	bind = "0.0.0.0:1883"
}

# #============================================================
# # TLS/SSL
# #============================================================

# listeners.ssl {
# 	# # tls url
# 	# #
# 	# # Value: "host:port"
# 	bind = "0.0.0.0:8883"
	
# 	# # tls key password
# 	# # String containing the user's password. Only used if the private keyfile
# 	# # is password-protected.
# 	# #
# 	# # Value: String
# 	# key_password="yourpass"
	
# 	# # tls keyfile
# 	# # Path to the file containing the user's private PEM-encoded key.
# 	# #
# 	# # Value: File
# 	keyfile = "/etc/certs/key.pem"
	
# 	# # tls cert file
# 	# # Path to a file containing the user certificate.
# 	# #
# 	# # Value: File
# 	certfile = "/etc/certs/cert.pem"
	
# 	# # tls ca cert file
# 	# # Path to the file containing PEM-encoded CA certificates. The CA certificates
# 	# # are used during server authentication and when building the client certificate chain.
# 	# #
# 	# # Value: File
# 	cacertfile = "/etc/certs/cacert.pem"
	
# 	# # A server only does x509-path validation in mode verify_peer,
# 	# # as it then sends a certificate request to the client (this
# 	# # message is not sent if the verify option is verify_none).
# 	# # You can then also want to specify option fail_if_no_peer_cert.
# 	# #
# 	# # Value: true: verify_peer | false: verify_none
# 	verify_peer = false
	
# 	# # Used together with {verify, verify_peer} by an SSL server. If set to true,
# 	# # the server fails if the client does not have a certificate to send, that is,
# 	# # sends an empty certificate.
# 	# #
# 	# # Value: true | false
# 	fail_if_no_peer_cert = false
# }

{{ if .listen_websocket }}
# #============================================================
# # WebSocket
# #============================================================
listeners.ws {
	# # websocket url
	# #
	# # Value: "host:port/path"
	bind = "0.0.0.0:8083/mqtt"
}
{{ end }}

# listeners.wss {
# 	# # websocket tls url
# 	# #
# 	# # Value: "host:port/path"
# 	bind = "0.0.0.0:8086/mqtt"
# }

# # -------------------- SQLite Config -------------------- ##
sqlite {
	# # Max message limitation for caching
	# # ( 0 means ineffective )
	# # Value: 1-infinity
	disk_cache_size = 102400
	# # Mounted file path 
	# #
	# # Value: path
	# mounted_file_path="/tmp/"
	
	# # The threshold of flushing messages to flash. 
	# #
	# # Hot updatable
	# # Value: 1-infinity
	flush_mem_threshold = 100
	
	# # Resend interval (ms)
	# # The interval for resending the messages after failure recovered. (not related to trigger)
	# # 
	# # Value: 1-infinity 
	resend_interval = 5000
}

# # #============================================================
# # # Http server
# # #============================================================
# http_server {
# 	# # http server port
# 	# #
# 	# # Value: 0 - 65535
# 	port = {{ .ingress_port }}
# 	# # limit connector
# 	# # Handle a specified maximum number of outstanding requests
# 	# #
# 	# # Value: 1-infinity
# 	limit_conn = 32
# 	# # http server username
# 	# #
# 	# # Value: String
# 	username = admin
# 	# # http server password
# 	# #
# 	# # Value: String
# 	password = admin
# 	# # http server auth type
# 	# # If set auth_type=jwt, make sure you have built JWT dependency with `-DENABLE_JWT=ON` first.
# 	# #
# 	# # Value: String basic | jwt
# 	auth_type = basic
# 	# jwt {
# 	# 	# # http server jwt public key file
# 	# 	# # Used together with 'http_server.auth_type=jwt',
# 	# 	# # Path to the file containing the user's private key.
# 	# 	# #
# 	# 	# # Value: File
# 	# 	public.keyfile = "/etc/certs/jwt/jwtRS256.key.pub"
# 	# }
# }

# # ------------------ Logging Config ------------------ ##
log {
	# # Where to emit the logs.
	# #
	# # - file: write logs to file
	# # - console: write logs to standard I/O
	# # - syslog: write logs to syslog
	# # Value: file | console | syslog
	# # Example: file,console,syslog
	to = [console]
	# # The log severity level.
	# #
	# # Value: trace | debug | info | warn | error | fatal
	# #
	# # Note: Only the messages with severity level higher than or equal to
	# #       this level will be logged.
	# #
	# # Default: warn
	level = warn
	# # The dir for log files.
	# #
	# # Value: Folder
	dir = "/tmp"
	# # The log filename for logs of level specified in "log.level".
	# #
	# # Value: String
	# # Default: nanomq.log
	file = "nanomq.log"
	rotation {
		# # Maximum size of each log file.
		# #
		# # Value: Number
		# # Default: 10M
		# # Supported Unit: KB | MB | GB
		size = 10MB
		# # Maximum rotation count of log files.
		# #
		# # Value: Number
		# # Default: 5
		count = 5
	}
}

# #============================================================
# # WebHook
# #============================================================

# webhook {
# ## Webhook URL
# ##
# ## Value: String
# url="http://127.0.0.1:80"
# ## HTTP Headers
# ##
# ## Example:
# ## 1. web.hook.headers.content-type="application/json"
# ## 2. web.hook.headers.accept="*"
# ##
# ## Value: String
# headers.content-type="application/json"
# ## The encoding format of the payload field in the HTTP body
# ## The payload field only appears in the on_message_publish and on_message_delivered actions
# ##
# ## Value: plain | base64 | base62
# body.encoding="plain"
# ## Connection process pool size
# ##
# ## Value: Number
# pool_size=32
# 
# # Unsupport now
# # tls {
# # 	keyfile="/etc/certs/key.pem"
# # 	certfile="/etc/certs/cert.pem"
# # 	cacertfile="/etc/certs/cacert.pem"
# # }
# 
# }

# webhook {
# 	url = "http://127.0.0.1:80"
# 	headers.content-type = "application/json"
# 	body.encoding = plain
# 	pool_size = 32
	
# 	events = [
# 		{ 
# 			# # Webhook event.
# 			# #
# 			# # Value: String
# 			# # Supported event list:
# 			# # event: on_client_connect
# 			# # event: on_client_connack
# 			# # event: on_client_connected
# 			# # event: on_client_disconnected
# 			# # event: on_client_subscribe
# 			# # event: on_client_unsubscribe
# 			# # event: on_session_subscribed
# 			# # event: on_session_unsubscribed
# 			# # event: on_session_terminated
# 			# # event: on_message_publish
# 			# # event: on_message_delivered
# 			# # event: on_message_acked
# 			event = "on_message_publish"

# 			# # Webhook topic.
# 			# #
# 			# # Value: String
# 			# # Support on message publish
# 			topic = "a/b/c"
# 		}
# 		{
# 			event = "on_client_connack"
# 		}
# 	]
# }

auth {
	# # anonymous
	# # allow anonymous login
	# #
	# # Hot updatable
	# # Value: true | false
{{ if .allow_anonymous }}
	allow_anonymous = true
{{ else }}
	allow_anonymous = false
{{ end }}
	
	# # Allow or deny if no ACL rules matched.
	# #
	# # Value: allow | deny
	no_match = allow
	
	# # The action when acl check reject current operation
	# #
	# # Value: ignore | disconnect
	# # Default: ignore
	deny_action = ignore
	
	cache = {
		# # The maximum count of ACL entries can be cached for a client.
		# #
		# # Value: Integer greater than 0
		# # Default: 32
		max_size = 32
		
		# # The time after which an ACL cache entry will be deleted
		# #
		# # Value: Duration
		# # Default: 1 minute
		ttl = 1m
	}
	
	# # This is password conf file.
	# #
	# # Value: path string
	# # Default: "/etc/pwd.conf"
	password = {include "/etc/nanomq_pwd.conf"}
	
	# # This is acl conf file.
	# #
	# # Value: path string
	# # Default: "/etc/acl.conf"
	acl = {include "/etc/nanomq_acl.conf"}
}
